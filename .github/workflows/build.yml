name: Build

on:
  push:
  pull_request:
  schedule:
    - cron: '0 20 1 * *'

jobs:
  analyze:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
      
  build_and_test:
    name: "Build and Test"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.1.5
      with:
        node-version: 14.x

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: "Install Dependencies"
      run: yarn --frozen-lockfile

    - name: generate build number
      id: build_number
      uses: zyborg/gh-action-buildnum@v1 
      with:
        gist_token: ${{ secrets.GIST_TOKEN }}

    - name: get date and revision
      id: date
      run: |
        echo ::set-output name=revision::sha-${GITHUB_SHA::8}
        echo ::set-output name=created::$(date -u +'%d.%m.%Y %H:%M:%S')

    - name: set buildnumber, date and revision
      run: |
        sed -i 's/VUE_APP_VERSION=Dev/VUE_APP_VERSION=${{ steps.build_number.outputs.global_build_number }}/g' .env
        sed -i 's/VUE_APP_DATE=Date/VUE_APP_DATE=${{ steps.prep.outputs.created }} }}/g' .env
        sed -i 's/VUE_APP_REVISION=Revision/VUE_APP_REVISION=${{ steps.prep.outputs.revision }} }}/g' .env

    - name: "Build"
      run: yarn run build
      
    - name: Archive dist
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: |
          dist
          !dist/report.html
          
    - name: Archive report
      uses: actions/upload-artifact@v2
      with:
        name: webpack report
        path: dist/report.html

    - name: "Unit Tests"
      run: yarn test:unit
      
    - name: Archive report
      uses: actions/upload-artifact@v2
      with:
        name: unit test coverage report
        path: coverage
      
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.1.5
      with:
        node-version: 14.x

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: "Install Dependencies"
      run: yarn --frozen-lockfile

    - name: "Build"
      run: yarn run test:unit

    - name: fix code coverage paths # see https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/5
      working-directory: ./coverage
      run: |
        sed -i 's/\/home\/runner\/work\/cevi-buchs-rohr-aarau-website\/cevi-buchs-rohr-aarau-website\//\/github\/workspace\//g' lcov.info
        sed -i 's/\/home\/runner\/work\/cevi-buchs-rohr-aarau-website\/cevi-buchs-rohr-aarau-website\//\/github\/workspace\//g' sonar-test-reporter.xml

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  buildDockerImage:
    runs-on: ubuntu-latest
    needs: [analyze, build_and_test, sonarcloud]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=ghcr.io/${{ github.repository }}/website
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
      
    - name: Download dist
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: .github/workflows/dist

    - name: copy default.conf
      run: |
        cp docker .github/workflows -R

    - name: Build container image
      uses: docker/build-push-action@v2
      with:
        context: .github/workflows
        file: .github/workflows/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    name: "Deploy to Heroku"
    needs: buildDockerImage
    runs-on: ubuntu-latest
    environment:
      name: test
      url: "https://cevi-buchs-rohr-aarau-webpage.herokuapp.com/"
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: .github/workflows/dist

      - name: copy default.conf
        run: |
          cp docker .github/workflows -R

      - uses: gonuit/heroku-docker-deploy@v1.3.1
        with:
          email: "heroku@uhlme.ch"
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "cevi-buchs-rohr-aarau-webpage"
          dockerfile_name: Dockerfile
          docker_options: "--no-cache"
          dockerfile_directory: ./.github/workflows