name: Build Main

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 20 1 * *'

jobs:
  build_and_test:
    name: "Build and Test"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.6.0
      with:
        node-version: 16.x

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: "Install Dependencies"
      run: yarn --frozen-lockfile

    - name: get date and revision
      id: date_and_rev
      run: |
        echo "revision=sha-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "created=$(date -u +'%d.%m.%Y %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: set env variables
      run: |
        sed -i 's#VUE_APP_DATE=Not specified#VUE_APP_DATE=${{ steps.date_and_rev.outputs.created }}#g' .env
        sed -i 's#VUE_APP_REVISION=Not specified#VUE_APP_REVISION=${{ steps.date_and_rev.outputs.revision }}#g' .env
        sed -i 's#SENTRY_AUTH_TOKEN=Not specified#SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_TOKEN }}#g' .env
        sed -i 's#VUE_APP_SENTRY_ENVIRONMENT=local#VUE_APP_SENTRY_ENVIRONMENT=heroku#g' .env

    - name: "Build"
      run: yarn run build

    - name: Archive dist
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: |
          dist
          !dist/report.html

    - name: Archive report
      uses: actions/upload-artifact@v3
      with:
        name: webpack report
        path: dist/report.html

    - name: "Unit Tests"
      run: yarn test:unit

    - name: Archive report
      uses: actions/upload-artifact@v3
      with:
        name: unit test coverage report
        path: coverage

    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest

    - name: "E2E Tests"
      run: yarn test:e2e

    - name: Archive E2E test report
      uses: actions/upload-artifact@v3
      with:
        name: e2e test report
        path: tests/e2e/reports

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [build_and_test]

    steps:
    - name: "Checkout"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: unit test coverage report
        path: coverage

    - name: fix code coverage paths # see https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/5
      working-directory: ./coverage
      run: |
        sed -i 's/\/home\/runner\/work\/cevi-buchs-rohr-aarau-website\/cevi-buchs-rohr-aarau-website\//\/github\/workspace\//g' lcov.info
        sed -i 's/\/home\/runner\/work\/cevi-buchs-rohr-aarau-website\/cevi-buchs-rohr-aarau-website\//\/github\/workspace\//g' sonar-test-reporter.xml

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  buildDockerImage:
    runs-on: ubuntu-latest
    needs: [build_and_test, sonarcloud]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=ghcr.io/${{ github.repository }}/website
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE,,}:${VERSION}"
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE,,}:sha-${GITHUB_SHA::8}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.5.0

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Download dist
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: docker/github/dist

    - name: Build container image
      uses: docker/build-push-action@v4.1.0
      with:
        context: docker/github
        file: docker/github/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
